!Plain Text
{SPLIT()}

[http://en.wikipedia.org/wiki/Plain_text|Wikipedia on Plain Text]
[http://en.wikipedia.org/wiki/Character_encoding|Wikipedia on Character Encodings]
[http://en.wikipedia.org/wiki/Unicode|Wikipedia on Unicode]

!!!!Related nodes
((node:Reader (String)))
((node:Writer (String)))
((node:Length (String)))
((node:Add (String)))
((node:Separate (String)))
((node:FormatValue (String)))
((node:Sort (String)))
...and many __many__ more
~~~

vvvv uses Unicode internally but it allows you to read and write plain text files in any encoding you like. 

Nodes consist for different datatypes (Values, Colors, XElements,...) to convert them into strings and back again.

Examples in your vvvv\girlpower\ directory:
* Strings

__See also:__
* ((Character Encoding))
* ((/contributions/1353+1351+2439+1352+7934+2438+1354+1355/2509+3795|Related Contributions))

{SPLIT}

!XML
{SPLIT()}

[http://en.wikipedia.org/wiki/XML|Wikipedia on XML]
[http://www.w3schools.com/xml/xml_whatis.asp|XML Tutorials]

!!!!Related nodes
((node:AsXElement (XML)))
((node:Element (XML Split)))
((node:Attribute (XML Split)))
((node:GetElements (XML ByXPath)))
((node:Cons(XElement)))
((node:XPath (XML)))
((node:XQuery (XML)))
((node:AsString(Object)))
...and many more
~~~

vvvv supports XML documents via a native datatype called [http://msdn.microsoft.com/en-us/library/system.xml.linq.xelement%28v=vs.110%29.aspx|XElements] which wraps the .net type of the same name. There is a range of nodes operating on that datatype that allow you to navigate through XML elements (tags) and attributes, perform complex XPath queries and construct XML documents on the fly.

XML documents can be read and saved as plain text files.

Examples in your vvvv\girlpower\ directory:
* Strings
* IO\Web\05_Wikipedia Example

__See also:__
* ((xml|XML Nodes explained in detail))
* ((/contributions/1353+1351+2439+1352+7934+2438+1354+1355/3074|Related Contributions))

{SPLIT}

!JSON
{SPLIT()}

[http://json.org|JSON specification]
[http://en.wikipedia.org/wiki/JSON|Wikipedia on JSON]

!!!!Related nodes
((node:AsXElement (JSON)))
~~~

JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate.

Examples in your vvvv\girlpower\ directory:
* Strings

__See also:__
* ((/contributions/1353+1351+2439+1352+2438+1354+1355/5572|Related Contributions))

{SPLIT}

!Regular Expressions
{SPLIT()}

[http://en.wikipedia.org/wiki/Regular_expression|Wikipedia on Regular Expression]

!!!!Related nodes
((node:RegExpr (String)))
~~~

Regular expressions are patterns used to match character combinations in strings.

Examples in your vvvv\girlpower\ directory:
* Strings

__See also:__
* ((faq-regexpr|Regular Expressions in detail))
* ((/contributions/1353+1351+2439+1352+2438+1354+1355/5572|Related Contributions))
* [http://regex101.com/| Online Regular Expressions tester]
* [http://www.regexper.com/| RegExpr visualization]

{SPLIT}

!TTY Renderer
{SPLIT()}

[http://en.wikipedia.org/wiki/Computer_terminal|Wikipedia on TTY]
[http://en.wikipedia.org/wiki/ASCII_art|Wikipedia on ASCII Art]
!!!!Related nodes
((node:Renderer (TTY)))
((node:Write (TTY)))
((node:WriteLn(TTY)))
((node:WritePage(TTY)))
~~~

((node:Renderer (TTY))) has two main usecases: mostly it is used as vvvvs error console so it is good practice to have a tty open to be informed of things that go wrong. But also it doubles as your realtime ASCII-art renderer. 

Examples in your vvvv\girlpower\ directory:
* Strings\TTY_Overview.v4p

{SPLIT}
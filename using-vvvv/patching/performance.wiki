This page collects information regarding potential optimization of your patches. 

!Detecting Performance Issues
In order to observe the performance of your patch you have two instruments:
* Use ((node:Timing (Debug))) or ((node:PerfMeter (Debug))) to keep an eye on your framerate
* Use the ((Debug Mode)) to see how much CPU-time each of your nodes/subpatches needs

!Resolving Performance Issues
* Learn how to ((subpatches#evaluation|control evaluation)) of subpatches
* Hide (Alt+3) patches (not only ((the-user-interface-in-detail#docking|dock)) them) to reduce the impact of vvvvs GUI on your CPU
* Nodes that don't have an input like 'Enable', 'Read', 'Write', ... will see if their input is changed every frame and if so re-perform their task. With large spreadcounts this 'check-for-changed' can be be quite CPU-intesive and often you as a patcher actually know when the change has happened. In those situations use a S+H node before the CPU-intensive operation and only sample its input when you know it has changed.
* ((node:MainLoop (VVVV))) has ((pin:Increase Timinig Precision)) which is on by default. While causing a smoother framerate in many cases it also causes higher CPU-needs in all cases. You'll have to find find out for your case if you want to change this setting. Here is a good read on the topic [ http://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted|Windows Timer Resolution Megawatts wasted].
* ((node:Boost (VVVV))) can increase vvvvÂ´s thread priority. In rare cases this may allow you to get the last quantum of performance out of your CPU. 
* Make sure to always use the latest drivers for your graphics card
* [http://www.overclockersclub.com/guides/windows_xp_services.php|Remove unneeded windows services]

